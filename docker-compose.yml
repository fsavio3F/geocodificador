# docker-compose.yml
# Nota: no declares "version:" (está obsoleto en Compose v2)

services:
  db:
    image: postgis/postgis:16-3.4
    container_name: geocodificador-db-1
    environment:
      POSTGRES_DB: ${PGDB}
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro   # SQL de init opcional
      - ./data:/data:ro                            # accesible para diagnósticos/ETL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: geocodificador-elasticsearch-1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:9200/_cluster/health"]
      interval: 5s
      timeout: 3s
      retries: 40
    restart: unless-stopped

  importer:
    build:
      context: .
      dockerfile: importer/Dockerfile
    container_name: geocodificador-importer-1
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGHOST: db
      PGPORT: 5432
      PGDB: ${PGDB}
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      DATA_DIR: /data
      # Si tu postload se copia en la imagen, dejalo apuntando a /app/postload.sql
      POSTLOAD_SQL: /app/postload.sql
    volumes:
      - ./data:/data:ro
      # - ./db:/db:ro  # alternativa si preferís montar el postload en vez de copiarlo
    restart: "no"     # corre una vez y termina

  loader:
    build:
      context: ./loader
    container_name: geocodificador-loader-1
    environment:
      ES_URL: http://elasticsearch:9200
      ES_INDEX: calles
      PGHOST: db
      PGPORT: 5432
      PGDB: ${PGDB}
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
    depends_on:
      db:
        condition: service_healthy
      importer:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_healthy
    command: ["python", "load_calles.py"]
    restart: "no"     # corre una vez y termina

  api:
    build:
      context: ./api
    container_name: geocodificador-api-1
    environment:
      PGHOST: db
      PGPORT: 5432
      PGDB: ${PGDB}
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      ES_URL: http://elasticsearch:9200
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pgdata:
  esdata:
